DEBUGGING LOG - MCP SSE Server Connection Issues
=====================================================
Date: September 22, 2025
Issue: Claude MCP Client getting "Tool execution failed" error when calling start_cyperf_server

PROBLEM DESCRIPTION:
-------------------
- User's Claude MCP client was connecting to http://localhost:8001/sse successfully
- MCP client could list tools and initialize connection
- However, when calling start_cyperf_server tool, it returned "Tool execution failed"
- Error in SSE server logs: "All connection attempts failed"

ROOT CAUSE ANALYSIS:
-------------------
The SSE server (mcp_sse_server.py) was using a global FASTAPI_BASE_URL variable that was set at import time:

```python
FASTAPI_BASE_URL = get_fastapi_base_url()  # Set at import time
```

This caused issues because:
1. Environment variables in Docker containers are not always available at import time
2. The SSE server was trying to connect to http://localhost:8000 instead of http://fastapi:8000
3. Within Docker network, services communicate using service names, not localhost

DEBUGGING STEPS TAKEN:
---------------------

1. **Initial Error Investigation**:
   - Checked SSE server logs: `docker-compose -f docker-compose.mcp.yml logs mcp-sse-server`
   - Found error: "All connection attempts failed"
   - Confirmed MCP client was connecting successfully but tool calls were failing

2. **FastAPI Logs Check**:
   - Checked FastAPI logs: `docker-compose -f docker-compose.mcp.yml logs fastapi`
   - FastAPI was not receiving any requests from SSE server
   - This confirmed the connection issue was between SSE server and FastAPI

3. **Environment Variable Investigation**:
   - Checked docker-compose.mcp.yml environment variables
   - Found FASTAPI_BASE_URL=http://fastapi:8000 was set correctly
   - Realized the issue was in how the variable was being used in Python code

4. **Code Analysis**:
   - Searched for all FASTAPI_BASE_URL references in mcp_sse_server.py
   - Found 14 occurrences, all using the global variable set at import time
   - Identified that get_fastapi_base_url() function existed but wasn't being used consistently

SOLUTION IMPLEMENTED:
--------------------

**Step 1: Fixed Missing Import**
- Added `import os` to mcp_sse_server.py (was causing NameError)

**Step 2: Updated All FASTAPI_BASE_URL References**
Changed all hardcoded FASTAPI_BASE_URL references to use dynamic function calls:

Before:
```python
response = await self.client.post(f"{FASTAPI_BASE_URL}/api/start_server", json=payload)
```

After:
```python
response = await self.client.post(f"{get_fastapi_base_url()}/api/start_server", json=payload)
```

**Files Modified:**
- Updated 11 method calls in mcp_sse_server.py:
  - _proxy_start_server()
  - _proxy_start_client()  
  - _proxy_get_server_stats()
  - _proxy_get_client_stats()
  - _proxy_get_server_stats_image()
  - _proxy_get_client_stats_image()
  - _proxy_get_server_logs()
  - _proxy_get_client_logs()
  - _proxy_stop_server()

**Step 3: Docker Environment Setup**
- Ensured docker-compose.mcp.yml had correct environment variable:
  ```yaml
  environment:
    - FASTAPI_BASE_URL=http://fastapi:8000
  ```

**Step 4: Full Container Rebuild**
- Ran docker_resurrection.sh to rebuild and restart all containers
- This ensured all code changes were applied

VERIFICATION STEPS:
------------------

1. **Health Check Test**:
   ```bash
   curl http://localhost:8001/health
   # Result: {"status":"healthy","fastapi":"connected"}
   ```

2. **Direct MCP Call Test**:
   ```bash
   curl -X POST http://localhost:8001/sse \
     -H "Content-Type: application/json" \
     -d '{
       "jsonrpc": "2.0",
       "id": 1,
       "method": "tools/call",
       "params": {
         "name": "start_cyperf_server",
         "arguments": {
           "server_ip": "44.200.244.212"
         }
       }
     }'
   ```
   
   **Result**: SUCCESS!
   ```json
   {
     "jsonrpc":"2.0",
     "id":1,
     "result":{
       "content":[{
         "type":"text",
         "text":"Server started successfully!\nTest ID: dd7e4e5a-eb1b-4012-9a3c-02370564d4dc\nServer PID: 4077\nStatus: SERVER_RUNNING\nMessage: Cyperf server started. Use test_id for all related operations."
       }]
     }
   }
   ```

3. **FastAPI Logs Verification**:
   ```
   fastapi-1  | nohup sudo cyperf -s --port 5202 --length 1k --csv-stats dd7e4e5a-eb1b-4012-9a3c-02370564d4dc_server.csv > dd7e4e5a-eb1b-4012-9a3c-02370564d4dc_server.log 2>&1 &
   fastapi-1  | INFO:     172.29.0.3:58082 - "POST /api/start_server HTTP/1.1" 200 OK"
   ```

LESSONS LEARNED:
---------------

1. **Environment Variables in Docker**: 
   - Environment variables should be read dynamically, not at import time
   - Docker service names should be used for inter-container communication

2. **Debugging Docker Networks**:
   - Health endpoints are crucial for verifying connectivity
   - Container logs provide essential debugging information
   - Service-to-service communication uses service names, not localhost

3. **MCP Protocol Debugging**:
   - MCP errors can be vague ("Tool execution failed")
   - Check server logs for specific error messages
   - Test individual components in the chain (MCP → SSE → FastAPI → SSH)

CURRENT STATUS:
--------------
✅ RESOLVED - All systems working correctly

**Working Flow:**
```
Claude MCP Client 
→ SSE Server (localhost:8001) ✅
→ FastAPI Server (fastapi:8000 in Docker) ✅  
→ SSH to target server ✅
→ Start Cyperf server ✅
→ Return success with Test ID & PID ✅
```

**Available Tools Now Working:**
- start_cyperf_server ✅
- start_cyperf_client ✅
- get_server_stats ✅
- get_client_stats ✅
- get_server_stats_image ✅
- get_client_stats_image ✅
- get_server_logs ✅
- get_client_logs ✅
- stop_server ✅

COMMANDS USED DURING DEBUG:
--------------------------
```bash
# Check SSE server logs
docker-compose -f docker-compose.mcp.yml logs mcp-sse-server | tail -20

# Check FastAPI logs  
docker-compose -f docker-compose.mcp.yml logs fastapi | tail -20

# Health check
curl http://localhost:8001/health

# Direct MCP test
curl -X POST http://localhost:8001/sse -H "Content-Type: application/json" -d '...'

# Rebuild containers
./docker_resurrection.sh

# Grant execute permissions (if needed)
chmod +x docker_resurrection.sh
```

FILES MODIFIED:
--------------
- mcp_sse_server.py (11 method updates + import fix)
- docker-compose.mcp.yml (environment variables)

RESOLUTION TIME:
---------------
Approximately 30 minutes of focused debugging and testing.

END OF DEBUG LOG
================
